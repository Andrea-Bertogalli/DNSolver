[{"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\index.js":"1","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\App.js":"2","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\contexts\\AuthContext.jsx":"3","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Login.jsx":"4","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\PrivateRoute.jsx":"5","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Dashboard.jsx":"6","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyButton.jsx":"7","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyTable.jsx":"8","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyCheckbox.jsx":"9","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyModal.jsx":"10","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\Constants.jsx":"11","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyBar.jsx":"12","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyAvatar.jsx":"13"},{"size":291,"mtime":1651071639877,"results":"14","hashOfConfig":"15"},{"size":598,"mtime":1651238368414,"results":"16","hashOfConfig":"15"},{"size":414,"mtime":1651233202347,"results":"17","hashOfConfig":"15"},{"size":7184,"mtime":1651823418755,"results":"18","hashOfConfig":"15"},{"size":352,"mtime":1651233228437,"results":"19","hashOfConfig":"15"},{"size":8835,"mtime":1655227084642,"results":"20","hashOfConfig":"15"},{"size":754,"mtime":1654958412666,"results":"21","hashOfConfig":"15"},{"size":3956,"mtime":1654958706502,"results":"22","hashOfConfig":"15"},{"size":471,"mtime":1651590729905,"results":"23","hashOfConfig":"15"},{"size":4297,"mtime":1655228824170,"results":"24","hashOfConfig":"15"},{"size":643,"mtime":1655224118464,"results":"25","hashOfConfig":"15"},{"size":4932,"mtime":1655224118480,"results":"26","hashOfConfig":"15"},{"size":518,"mtime":1651248519766,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"del8ih",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"31"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\index.js",[],[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\App.js",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\contexts\\AuthContext.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Login.jsx",["72"],[],"import React, { useRef, useEffect, useState, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport AuthContext from \"../contexts/AuthContext.jsx\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport Link from '@mui/material/Link';\r\nimport { Link as lk} from 'react-router-dom'\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport { createTheme, ThemeProvider, styled } from '@mui/material/styles';\r\nimport bgImg from '../images/background.png'\r\nimport * as Constants from '../Constants';\r\nimport FancyCheckbox from './FancyCheckbox.jsx';\r\n\r\nconst WhiteBorderTextField = styled(TextField)`\r\n  & label.Mui-focused {\r\n    color: white;\r\n  }\r\n  & .MuiOutlinedInput-root {\r\n    &.Mui-focused fieldset {\r\n      border-color: white;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = () => {\r\n    const { setAuth } = useContext(AuthContext);\r\n    const userRef = useRef();\r\n    const [user, setUser] = useState('')\r\n    const [pwd, setPwd] = useState('');\r\n    const navigate = useNavigate();\r\n    const [isFormInvalid, setIsFormInvalid] = useState(false);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        var prevAuth = JSON.parse(localStorage.getItem('auth'));\r\n        if(prevAuth && prevAuth.success) {\r\n            setAuth(prevAuth);\r\n            navigate('/dashboard');\r\n        }\r\n\r\n        document.title = \"DNSolver - Login\"\r\n        userRef.current.focus();\r\n    }, [])\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        axios.post(Constants.BACKEND_URL + 'login', {\r\n            username: user,\r\n            password: pwd\r\n        })\r\n        .then(function (response) {\r\n            setAuth({\r\n                success: true,\r\n                name: response.data.name,\r\n                surname: response.data.surname,\r\n                username: response.data.username\r\n            });\r\n\r\n            if(checked){\r\n                localStorage.setItem('auth', JSON.stringify({ success: true,\r\n                name: response.data.name,\r\n                surname: response.data.surname,\r\n                username: response.data.username }));\r\n            }\r\n\r\n            navigate('/dashboard');\r\n        })\r\n        .catch(function (error) {\r\n            if (!error?.response) {\r\n                alert('Connection timeout!');\r\n                console.log('Server timeout!');\r\n            } else if (error.response?.status === 404) {\r\n                setIsFormInvalid(true);\r\n                console.log('Wrong username or password!');\r\n            } else if (error.response?.status === 500) {\r\n                alert('Server error!');\r\n                console.log('Server error!');\r\n            } else {\r\n                console.log('Unknown cause (login failed)!');\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleCheckOnClick = (e) => {\r\n        const checked = e.target.checked;\r\n        if (checked) {\r\n            setChecked(true);\r\n        } else {\r\n            setChecked(false);\r\n        }\r\n    }\r\n\r\n    function Copyright(props) {\r\n      return (\r\n        <Typography variant = \"body2\" color = \"text.secondary\" align = \"center\" {...props}>\r\n          {'Copyright Â© '}\r\n          <Link color=\"inherit\" href = { \"./\" }>\r\n            DNSolver\r\n          </Link>{' '}\r\n          {new Date().getFullYear()}\r\n          {'.'}\r\n        </Typography>\r\n      );\r\n    }\r\n\r\n    const theme = createTheme({\r\n      palette: {\r\n        mode: 'dark',\r\n      },\r\n    });\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>\r\n        <Grid container component=\"main\" sx={{ height: '100vh' }}>\r\n          <CssBaseline />\r\n          <Grid\r\n            item\r\n            xs={false}\r\n            sm={4}\r\n            md={7}\r\n            sx={{\r\n              backgroundImage: 'url(' + bgImg +')',\r\n              backgroundRepeat: 'no-repeat',\r\n              backgroundSize: 'cover',\r\n              backgroundPosition: 'center',\r\n            }}\r\n          />\r\n          <Grid style = {{backgroundColor: 'rgb(2,52,48)'}} item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n            <Box\r\n              sx={{\r\n                my: 8,\r\n                mx: 4,\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 1 }}>\r\n                <WhiteBorderTextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  ref = {userRef}\r\n                  value = {user}\r\n                  onChange={(e) => setUser(e.target.value)}\r\n                  error = { isFormInvalid }\r\n                  id=\"username\"\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  autoComplete=\"username\"\r\n                  autoFocus\r\n                  style={{color: 'white'}}\r\n                />\r\n                <WhiteBorderTextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  value = {pwd}\r\n                  onChange={(e) => setPwd(e.target.value)}\r\n                  error = { isFormInvalid }\r\n                  helperText={isFormInvalid && \"Wrong username or password!\"}\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  style={{ color: 'white'}}\r\n                />\r\n                <FancyCheckbox label = 'Remember me' onChange = {handleCheckOnClick} />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{ mt: 3, mb: 2 }}\r\n                  style={{backgroundColor: '#13aa52', color: 'white'}}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Grid container>\r\n                  <Grid item xs>\r\n                    <Link  href=\"#\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Link component={lk} to=\"/registration\" variant=\"body2\">\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n                <Copyright sx={{ mt: 5 }} />\r\n              </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n\r\nexport default Login;\r\n","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\PrivateRoute.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Dashboard.jsx",["73","74","75","76","77","78","79"],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyButton.jsx",["80","81"],[],"import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport Button from '@mui/material/Button';\r\nimport Stack from '@mui/material/Stack';\r\nimport { purple } from '@mui/material/colors';\r\n\r\nconst ColorButton = styled(Button)(({ theme }) => ({\r\n  color: 'white',\r\n  textAlign: 'Right',\r\n  top: '-0.5px',\r\n  left: '-20px',\r\n  minWidth: '120px',\r\n  backgroundColor: '#13aa52',\r\n  borderBottomRightRadius: '24px',\r\n  borderTopRightRadius: '24px',\r\n  border: '1px solid white',\r\n  minHeight:'40px',\r\n  zIndex:'1',\r\n  '&:hover': {\r\n    backgroundColor: 'rgb(2,52,48)',\r\n  },\r\n}));\r\n\r\nexport default function FancyButton(props) {\r\n  return (\r\n    <ColorButton onClick={props.onClick} variant=\"contained\">QUERY</ColorButton>\r\n  );\r\n}\r\n","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyTable.jsx",["82","83"],[],"import React, { useState, useContext, useEffect } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Box from '@mui/material/Box';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\n\r\nfunction createData(type, host, payload) {\r\n  return {\r\n      type: type,\r\n      host: host,\r\n      payload: payload\r\n  }\r\n}\r\n\r\nfunction Row(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {row.type}\r\n        </TableCell>\r\n        <TableCell align=\"right\">{row.host}</TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box sx={{ margin: 1 }}>\r\n              <Typography sx={{ fontWeight: 'bold', m: 1 }} variant=\"h6\" gutterBottom component=\"div\">\r\n                Details\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                  {Object.keys(row.payload[0]).map((field) => (\r\n                      <TableCell><Typography sx={{ fontWeight: 'bold', m: 1 }}> {field} </Typography></TableCell>\r\n                  ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.payload.map((row, index) => (\r\n                    <TableRow key={ index }>\r\n                      {Object.values(row).map((value) => (\r\n                        <TableCell>{ value }</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function FancyTable(props) {\r\n    const [rows, setRows] = useState([]);\r\n    useEffect(() => {\r\n        setRows([]);\r\n        var tmp = [];\r\n        for (const [key, value] of Object.entries(props.results)) {\r\n            tmp.push(createData(key, value[\"host\"], value[\"payload\"]));\r\n        }\r\n        setRows(tmp);\r\n    }, [props, setRows])\r\n\r\n  return (\r\n      <div style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>\r\n    <TableContainer component={Paper} style={{maxHeight: '60vh', maxWidth:'75vw', overflow: 'auto', }}>\r\n      <Table aria-label=\"collapsible table\">\r\n        <TableHead >\r\n          <TableRow >\r\n            <TableCell />\r\n            <TableCell> <Typography sx={{ fontWeight: 'bold', m: 1 }}> Type </Typography> </TableCell>\r\n            <TableCell align=\"right\"><Typography sx={{ fontWeight: 'bold', m: 1 }}> Target </Typography></TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <Row key = {row.type + row.host} row={row} />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    </div>\r\n  );\r\n}\r\n","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyCheckbox.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyModal.jsx",["84","85","86"],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\Constants.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyBar.jsx",["87","88","89","90","91"],[],"import React, {  useContext } from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Container from '@mui/material/Container';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FancyAvatar from './FancyAvatar';\r\nimport lgImg from '../images/logo.png';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport * as Constants from '../Constants';\r\nimport AuthContext from \"../contexts/AuthContext.jsx\";\r\n\r\nconst pages = [];\r\nconst settings = ['Settings', 'Clear history', 'Logout'];\r\n\r\nconst FancyBar = ({updateHistory, handleOpen}) => {\r\n  const [anchorElNav, setAnchorElNav] = React.useState(null);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n  const navigate = useNavigate();\r\n  const { auth } = useContext(AuthContext);\r\n\r\n  const handleOpenNavMenu = (event) => {\r\n    setAnchorElNav(event.currentTarget);\r\n  };\r\n  const handleOpenUserMenu = (event) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setAnchorElNav(null);\r\n  };\r\n\r\n  const handleCloseUserMenu = (page) => {\r\n    if(page === \"Logout\"){\r\n        localStorage.clear();\r\n        navigate(\"/login\");\r\n    }else if(page === \"Clear history\"){\r\n        axios.get(Constants.BACKEND_URL + auth.username + Constants.CLEAR_HISTORY);\r\n        updateHistory();\r\n    }\r\n    else if(page === \"Settings\") {\r\n        handleOpen();\r\n    }\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n  return (\r\n    <AppBar style={{backgroundColor: 'rgb(255,255,255)'}} position=\"static\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            <img style={{ width: '30%'}} src={lgImg} />\r\n          </Typography>\r\n\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\r\n\r\n            <Menu\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElNav}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'left',\r\n              }}\r\n              open={Boolean(anchorElNav)}\r\n              onClose={handleCloseNavMenu}\r\n              sx={{\r\n                display: { xs: 'block', md: 'none' },\r\n              }}\r\n            >\r\n              {pages.map((page) => (\r\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\r\n                  <Typography textAlign=\"center\">{page}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\r\n          >\r\n            <img style={{ width: '10%'}} src={lgImg} />\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n            {pages.map((page) => (\r\n              <Button\r\n                key={page}\r\n                onClick={handleCloseNavMenu}\r\n                sx={{ my: 2, color: 'white', display: 'block' }}\r\n              >\r\n                {page}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n\r\n          <Box sx={{ flexGrow: 0 }}>\r\n            <Tooltip title=\"Open settings\">\r\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                <FancyAvatar />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Menu\r\n              sx={{ mt: '45px' }}\r\n              id=\"menu-appbar\"\r\n              anchorEl={anchorElUser}\r\n              anchorOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              keepMounted\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              open={Boolean(anchorElUser)}\r\n              onClose={handleCloseUserMenu}\r\n            >\r\n              {settings.map((setting) => (\r\n                <MenuItem key={setting} onClick={() => handleCloseUserMenu(setting)}>\r\n                  <Typography textAlign=\"center\">{setting}</Typography>\r\n                </MenuItem>\r\n              ))}\r\n            </Menu>\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default FancyBar;\r\n","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyAvatar.jsx",[],[],{"ruleId":"92","severity":1,"message":"93","line":50,"column":8,"nodeType":"94","endLine":50,"endColumn":10,"suggestions":"95"},{"ruleId":"96","severity":1,"message":"97","line":59,"column":11,"nodeType":"98","messageId":"99","endLine":59,"endColumn":24},{"ruleId":"96","severity":1,"message":"100","line":64,"column":26,"nodeType":"98","messageId":"99","endLine":64,"endColumn":31},{"ruleId":"96","severity":1,"message":"101","line":70,"column":11,"nodeType":"98","messageId":"99","endLine":70,"endColumn":24},{"ruleId":"102","severity":1,"message":"103","line":121,"column":20,"nodeType":"104","messageId":"105","endLine":121,"endColumn":32},{"ruleId":"96","severity":1,"message":"106","line":123,"column":13,"nodeType":"98","messageId":"99","endLine":123,"endColumn":20},{"ruleId":"96","severity":1,"message":"107","line":124,"column":13,"nodeType":"98","messageId":"99","endLine":124,"endColumn":22},{"ruleId":"108","severity":1,"message":"109","line":124,"column":25,"nodeType":"104","messageId":"105","endLine":124,"endColumn":36},{"ruleId":"96","severity":1,"message":"110","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":13},{"ruleId":"96","severity":1,"message":"111","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":16},{"ruleId":"96","severity":1,"message":"112","line":1,"column":27,"nodeType":"98","messageId":"99","endLine":1,"endColumn":37},{"ruleId":"96","severity":1,"message":"113","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":17},{"ruleId":"96","severity":1,"message":"114","line":1,"column":39,"nodeType":"98","messageId":"99","endLine":1,"endColumn":48},{"ruleId":"96","severity":1,"message":"115","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":21},{"ruleId":"96","severity":1,"message":"116","line":11,"column":23,"nodeType":"98","messageId":"99","endLine":11,"endColumn":36},{"ruleId":"96","severity":1,"message":"117","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":16},{"ruleId":"96","severity":1,"message":"118","line":10,"column":8,"nodeType":"98","messageId":"99","endLine":10,"endColumn":14},{"ruleId":"96","severity":1,"message":"119","line":30,"column":9,"nodeType":"98","messageId":"99","endLine":30,"endColumn":26},{"ruleId":"120","severity":1,"message":"121","line":65,"column":13,"nodeType":"122","endLine":65,"endColumn":56},{"ruleId":"120","severity":1,"message":"121","line":101,"column":13,"nodeType":"122","endLine":101,"endColumn":56},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'setAuth'. Either include them or remove the dependency array.","ArrayExpression",["123"],"no-unused-vars","'handleOnHover' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","'handleOnFocus' is assigned a value but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'history' is assigned a value but never used.","'tempItems' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","'Stack' is defined but never used.","'purple' is defined but never used.","'useContext' is defined but never used.","'PropTypes' is defined but never used.","'useEffect' is defined but never used.","'createTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'MenuIcon' is defined but never used.","'Avatar' is defined but never used.","'handleOpenNavMenu' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"124","fix":"125"},"Update the dependencies array to be: [navigate, setAuth]",{"range":"126","text":"127"},[1787,1789],"[navigate, setAuth]"]