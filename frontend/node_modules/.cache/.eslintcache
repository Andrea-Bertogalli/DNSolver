[{"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\index.js":"1","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\App.js":"2","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\contexts\\AuthContext.jsx":"3","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\PrivateRoute.jsx":"4","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Login.jsx":"5","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Dashboard.jsx":"6","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyCheckbox.jsx":"7","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyButton.jsx":"8","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\Constants.jsx":"9","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyBar.jsx":"10","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyAvatar.jsx":"11","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyTable.jsx":"12"},{"size":291,"mtime":1651071639877,"results":"13","hashOfConfig":"14"},{"size":598,"mtime":1651238368414,"results":"15","hashOfConfig":"14"},{"size":414,"mtime":1651233202347,"results":"16","hashOfConfig":"14"},{"size":352,"mtime":1651233228437,"results":"17","hashOfConfig":"14"},{"size":7184,"mtime":1651823418755,"results":"18","hashOfConfig":"14"},{"size":8103,"mtime":1654943069219,"results":"19","hashOfConfig":"14"},{"size":471,"mtime":1651590729905,"results":"20","hashOfConfig":"14"},{"size":632,"mtime":1651673645954,"results":"21","hashOfConfig":"14"},{"size":592,"mtime":1654940131763,"results":"22","hashOfConfig":"14"},{"size":4854,"mtime":1654943042924,"results":"23","hashOfConfig":"14"},{"size":518,"mtime":1651248519766,"results":"24","hashOfConfig":"14"},{"size":3572,"mtime":1654942879837,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"del8ih",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\index.js",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\App.js",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\contexts\\AuthContext.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\PrivateRoute.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Login.jsx",["63"],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\Dashboard.jsx",["64","65","66","67","68","69","70"],[],"import React, { useState, useContext, useEffect } from 'react'\r\nimport axios from \"axios\";\r\nimport AuthContext from \"../contexts/AuthContext.jsx\";\r\nimport {ReactSearchAutocomplete} from \"react-search-autocomplete\";\r\nimport FancyBar from \"./FancyBar\";\r\nimport * as Constants from '../Constants';\r\nimport FancyCheckbox from './FancyCheckbox.jsx';\r\nimport FancyButton from './FancyButton.jsx';\r\nimport Stack from '@mui/material/Stack';\r\nimport FancyTable from './FancyTable.jsx';\r\n\r\nconst formatResult = (item) => {\r\n  return (\r\n    <div className=\"result-wrapper\">\r\n        <span className=\"result-span\" style= {{\r\n            backgroundColor: 'rgb(255, 0, 0,0.5)',\r\n            marginRight: '20px',\r\n        }}>{item.type}</span>\r\n        <span className=\"result-span\" style= {{backgroundColor: 'rgb(107, 218, 255,0.5)'}}>{item.request}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Dashboard = () => {\r\n    const { auth } = useContext(AuthContext);\r\n    const [items, setItems] = useState([]);\r\n    const [results, setResults] = useState({});\r\n    const [checked, setChecked] = useState({\r\n        'A': false,\r\n        'AAAA': false,\r\n        'SOA': false,\r\n        'IP': false,\r\n        'CAA': false,\r\n        'SERVICE': false,\r\n        'LOOKUP': false,\r\n        'CNAME': false,\r\n        'MX': false,\r\n        'NS': false,\r\n        'SRV': false,\r\n        'PTR': false,\r\n        'TXT': false,\r\n        'ANY': false\r\n    });\r\n    const [searchString, setSearchString] = useState(\"\");\r\n\r\n    const handleOnSearch = (string, results) => {\r\n        setSearchString(string);\r\n    };\r\n\r\n    const handleOnHover = (result) => {\r\n    };\r\n\r\n    const handleOnSelect = (item) => {\r\n        setSearchString(item.request);\r\n        for (const [key, value] of Object.entries(checked)) {\r\n            checked[key] = false;\r\n        }\r\n        checked[item.type] = true;\r\n    };\r\n\r\n    const handleOnFocus = () => {\r\n    };\r\n\r\n    const handleOnClear = () => {\r\n    };\r\n\r\n    function handleCheckOnClick(id) {\r\n        var tmp = {};\r\n        Object.assign(tmp, checked);\r\n        if(tmp[id]) {\r\n            tmp[id] = false;\r\n        }\r\n        else if(!tmp[id]) {\r\n            tmp[id] = true;\r\n        }\r\n        setChecked(tmp);\r\n    }\r\n\r\n    async function getResults(queries){\r\n        var results = {};\r\n        for (const key of Object.keys(queries)){\r\n            var res  = await axios.get(queries[key].query);\r\n            if(key === 'ANY'){\r\n                for (const [mapKey, value] of Object.entries(res.data)) {\r\n                  results[mapKey] = {host: queries[key].host, payload: value};\r\n                }\r\n            }else{\r\n                results[key] = {host: queries[key].host, payload: res.data};\r\n            }\r\n        };\r\n\r\n        return results;\r\n    }\r\n\r\n    async function getHistory(queries) {\r\n        var results = [];\r\n        var res = [];\r\n        for (const key of Object.keys(queries)){\r\n            res = await axios.put(Constants.BACKEND_URL + auth.username + '/history', {\r\n                        entry: { type: key, request: queries[key].host }\r\n                      });\r\n\r\n        };\r\n        results = res.data;\r\n\r\n        return results;\r\n    }\r\n\r\n    function updateHistory(){\r\n        setItems([]);\r\n    }\r\n\r\n    function handleQuery() {\r\n        setResults(new Object());\r\n        var queries = {};\r\n        var history = [];\r\n        var tempItems = new Array();\r\n\r\n        Object.keys(checked).forEach(key => {\r\n            var query = Constants.BACKEND_URL + auth.username;\r\n            if(checked[key]) {\r\n                if(key === \"MX\") {query += (Constants.MX + searchString);}\r\n                else if(key === \"A\") {query += (Constants.A + searchString);}\r\n                else if(key === \"ANY\") {query += (Constants.ANY + searchString);}\r\n                else if(key === \"AAAA\") {query += (Constants.AAAA + searchString);}\r\n                else if(key === \"SOA\") {query += (Constants.SOA + searchString);}\r\n                else if(key === \"IP\") {query += (Constants.IP + searchString);}\r\n                else if(key === \"CAA\") {query += (Constants.CAA + searchString);}\r\n                else if(key === \"LOOKUP\") {query += (Constants.SERVICE + searchString);}\r\n                else if(key === \"CNAME\") {query += (Constants.CNAME + searchString);}\r\n                else if(key === \"MX\") {query += (Constants.MX + searchString);}\r\n                else if(key === \"NS\") {query += (Constants.NS + searchString);}\r\n                else if(key === \"SRV\") {query += (Constants.SRV + searchString);}\r\n                else if(key === \"PTR\") {query += (Constants.PTR + searchString);}\r\n                else if(key === \"TXT\") {query += (Constants.TXT + searchString);}\r\n\r\n                queries[key] = {host: searchString, query: query};\r\n            }\r\n        });\r\n\r\n        getResults(queries).then(res => {\r\n            setResults(res);\r\n        });\r\n        getHistory(queries).then(res => {\r\n            setItems(res);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.title = \"DNSolver - Dashboard\";\r\n        axios.get(Constants.BACKEND_URL + auth.username + '/history/').then(function (res) {\r\n            setItems(res.data.history);\r\n        });\r\n    }, [auth])\r\n\r\n    return (\r\n        <>\r\n            <FancyBar updateHistory = {updateHistory}/>\r\n            <div style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>\r\n                <Stack direction=\"row\" style={{justifyContent: 'center'}}>\r\n                    <FancyCheckbox label = 'MX' isChecked={checked['MX']} onChange = {() => handleCheckOnClick('MX')} />\r\n                    <FancyCheckbox label = 'AAAA'  isChecked={checked['AAAA']} onChange = {() => handleCheckOnClick('AAAA')}/>\r\n                    <FancyCheckbox label = 'IP'  isChecked={checked['IP']} onChange = {() => handleCheckOnClick('IP')}/>\r\n                    <FancyCheckbox label = 'SOA'  isChecked={checked['SOA']} onChange = {() => handleCheckOnClick('SOA')}/>\r\n                    <FancyCheckbox label = 'CAA'  isChecked={checked['CAA']} onChange = {() => handleCheckOnClick('CAA')}/>\r\n                    <FancyCheckbox label = 'LOOKUP' isChecked={checked['LOOKUP']}  onChange = {() => handleCheckOnClick('LOOKUP')}/>\r\n                    <FancyCheckbox label = 'CNAME' isChecked={checked['CNAME']} onChange = {() => handleCheckOnClick('CNAME')}/>\r\n                    <FancyCheckbox label = 'A'  isChecked={checked['A']} onChange = {() => handleCheckOnClick('A')}/>\r\n                    <FancyCheckbox label = 'NS' isChecked={checked['NS']}  onChange = {() => handleCheckOnClick('NS')}/>\r\n                    <FancyCheckbox label = 'SRV'  isChecked={checked['SRV']} onChange = {() => handleCheckOnClick('SRV')}/>\r\n                    <FancyCheckbox label = 'PTR' isChecked={checked['PTR']}  onChange = {() => handleCheckOnClick('PTR')}/>\r\n                    <FancyCheckbox label = 'TXT'  isChecked={checked['TXT']} onChange = {() => handleCheckOnClick('TXT')}/>\r\n                    <FancyCheckbox label = 'ANY'  isChecked={checked['ANY']} onChange = {() => handleCheckOnClick('ANY')}/>\r\n                </Stack>\r\n                <Stack direction='row'>\r\n                    <div style={{width: '75vw'}}>\r\n                      <ReactSearchAutocomplete\r\n                        onSelect = {handleOnSelect}\r\n                        items={items}\r\n                        onSearch={handleOnSearch}\r\n                        onClear={handleOnClear}\r\n                        showClear={false}\r\n                        inputSearchString={searchString}\r\n                        inputDebounce={500}\r\n                        autoFocus\r\n                        styling={{hoverBackgroundColor: \"#eee\"}}\r\n                        formatResult={formatResult}\r\n                        fuseOptions={{keys: ['type', 'request']}}\r\n                      />\r\n                    </div>\r\n                    <FancyButton onClick={handleQuery}/>\r\n                </Stack>\r\n\r\n                <FancyTable results={results}/>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n  }\r\n\r\nexport default Dashboard;\r\n","D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyCheckbox.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyButton.jsx",["71","72"],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\Constants.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyBar.jsx",["73","74","75","76","77"],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyAvatar.jsx",[],[],"D:\\unipr\\Telematica\\Progetto\\Telematica\\frontend\\src\\components\\FancyTable.jsx",["78","79"],[],{"ruleId":"80","severity":1,"message":"81","line":50,"column":8,"nodeType":"82","endLine":50,"endColumn":10,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":50,"column":11,"nodeType":"86","messageId":"87","endLine":50,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":55,"column":26,"nodeType":"86","messageId":"87","endLine":55,"endColumn":31},{"ruleId":"84","severity":1,"message":"89","line":61,"column":11,"nodeType":"86","messageId":"87","endLine":61,"endColumn":24},{"ruleId":"90","severity":1,"message":"91","line":114,"column":20,"nodeType":"92","messageId":"93","endLine":114,"endColumn":32},{"ruleId":"84","severity":1,"message":"94","line":116,"column":13,"nodeType":"86","messageId":"87","endLine":116,"endColumn":20},{"ruleId":"84","severity":1,"message":"95","line":117,"column":13,"nodeType":"86","messageId":"87","endLine":117,"endColumn":22},{"ruleId":"96","severity":1,"message":"97","line":117,"column":25,"nodeType":"92","messageId":"93","endLine":117,"endColumn":36},{"ruleId":"84","severity":1,"message":"98","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":13},{"ruleId":"84","severity":1,"message":"99","line":5,"column":10,"nodeType":"86","messageId":"87","endLine":5,"endColumn":16},{"ruleId":"84","severity":1,"message":"100","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":16},{"ruleId":"84","severity":1,"message":"101","line":10,"column":8,"nodeType":"86","messageId":"87","endLine":10,"endColumn":14},{"ruleId":"84","severity":1,"message":"102","line":30,"column":9,"nodeType":"86","messageId":"87","endLine":30,"endColumn":26},{"ruleId":"103","severity":1,"message":"104","line":62,"column":13,"nodeType":"105","endLine":62,"endColumn":56},{"ruleId":"103","severity":1,"message":"104","line":98,"column":13,"nodeType":"105","endLine":98,"endColumn":56},{"ruleId":"84","severity":1,"message":"106","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":37},{"ruleId":"84","severity":1,"message":"107","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":17},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'setAuth'. Either include them or remove the dependency array.","ArrayExpression",["108"],"no-unused-vars","'handleOnHover' is assigned a value but never used.","Identifier","unusedVar","'value' is assigned a value but never used.","'handleOnFocus' is assigned a value but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'history' is assigned a value but never used.","'tempItems' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","'Stack' is defined but never used.","'purple' is defined but never used.","'MenuIcon' is defined but never used.","'Avatar' is defined but never used.","'handleOpenNavMenu' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useContext' is defined but never used.","'PropTypes' is defined but never used.",{"desc":"109","fix":"110"},"Update the dependencies array to be: [navigate, setAuth]",{"range":"111","text":"112"},[1787,1789],"[navigate, setAuth]"]